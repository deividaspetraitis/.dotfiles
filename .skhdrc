#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]
#
# modes
# register mode "default"
:: default : echo default && sketchybar -m --set modal_indicator icon="N" --bar color="0xdd2a2f38"

# focus window in bsp mode
# TODO: should be able to focus on other modes as well?
alt - h: $DOTDIR/yabai/focus_hjkl.sh h
alt - j: yabai -m window --focus south
alt - k: yabai -m window --focus north
alt - l: $DOTDIR/yabai/focus_hjkl.sh l

# swap window
shift + alt - h : yabai -m window --swap west
shift + alt - j : yabai -m window --swap south
shift + alt - k : yabai -m window --swap north
shift + alt - l : yabai -m window --swap east

# move  window to monitor
shift + alt - o : yabai -m window --display 2 ; yabai -m window --focus recent
shift + alt - e : yabai -m window --display 1 ; yabai -m window --focus recent

# toggle parent zoom
alt - p : yabai -m window --toggle zoom-parent
alt - x : yabai -m window --toggle split 

# TODO: move window to space:
# yabai -m window --space 1

# TODO: focus to space: apple script?
# https://stackoverflow.com/questions/21878482/what-do-the-parameter-values-in-applesymbolichotkeys-plist-dict-represent
# https://apple.stackexchange.com/questions/201816/how-do-i-change-mission-control-shortcuts-from-the-command-line
# https://github.com/koekeishiya/yabai/issues/377
#
#
# Auto VPN: https://osxdaily.com/2016/08/19/run-applescript-command-line-macos-osascript/
#
# open terminal, TODO: and focus!
cmd - return : /Applications/iTerm.app/Contents/MacOS/iTerm2 ; 

# kill focused window
alt + shift - q : skhd --key "cmd - w" ; yabai -m window --focus recent

# https://github.com/FelixKratz/dotfiles/blob/master/.config/sketchybar/sketchybarrc
# https://github.com/typkrft/dots/blob/main/sketchybar/modal
#
# defaults write NSGlobalDomain NSAutomaticWindowAnimationsEnabled -bool NO
# defaults write com.apple.dock expose-animation-duration -int 0; killall Dock
# defaults write com.apple.dock expose-animation-duration -float 0.0
# register mode "window" 
# -------------
:: window @ : echo window && sketchybar -m --set modal_indicator icon="W" --bar color="0xdd808080"

# when in default mode, alt - w activates window mode
alt - w ; window

# when in window mode, escape activates default mode
window < escape ; default

# resize window
window < shift - h : yabai -m window west --resize right:-20:0 2> /dev/null || yabai -m window --resize right:-20:0 ; skhd --key "alt - w"
window < shift - j : yabai -m window north --resize bottom:0:20 2> /dev/null || yabai -m window --resize bottom:0:20 ; skhd --key "alt - w"
window < shift - k : yabai -m window south --resize top:0:-20 2> /dev/null || yabai -m window --resize top:0:-20 ; skhd --key "alt - w"
window < shift - l : yabai -m window east --resize left:20:0 2> /dev/null || yabai -m window --resize left:20:0 ; skhd --key "alt - w"

# balance size of windows
window < b : yabai -m space --balance

# register mode "focus"
# -------------
:: focus @ : echo focus && sketchybar -m --set modal_indicator icon="F" --bar color="0xddffb86c"

# when in default mode, alt - w activates focus mode
alt - f ; focus

# when in focus mode, escape activates default mode
focus < escape ; default

# full screen
# this is not we want actually for "full screen" because after changing layout previous layout positions are broken!
#focus < f: yabai -m space --layout "$(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "stack" else "bsp" end')" ; skhd --key "escape"
# in native-fullscreen swiching from full screen window looses its position 
focus < f: yabai -m window --toggle zoom-fullscreen ; skhd --key "escape"

# focus app
focus < b : yabai -m window $(yabai -m query --windows | jq -c '.[] | select(.title|test("qutebrowser$")) .id') --focus ; skhd --key "escape"
focus < t : yabai -m window $(yabai -m query --windows | jq -c '.[] | select( .app == "iTerm2" ) .id') --focus ; skhd --key "escape"
focus < m : yabai -m window $(yabai -m query --windows | jq -c '.[] | select( .app == "Mail" ) .id') --focus ; skhd --key "escape"
focus < c : yabai -m window $(yabai -m query --windows | jq -c '.[] | select( (.app == "Microsoft Teams" ) and .level == 0 ) .id') --focus ; skhd --key "escape"

# register mode "launcher"
# -------------
:: launcher @ : echo launcher && sketchybar -m --set modal_indicator icon="L" --bar color="0xddffb86c"

# when in default mode, alt - l activates launcher mode
alt - o ; launcher

# when in launcher mode, escape activates default mode
launcher < escape ; default

launcher < b : /usr/local/bin/qutebrowser ; skhd --key "escape" # escape is not not working
